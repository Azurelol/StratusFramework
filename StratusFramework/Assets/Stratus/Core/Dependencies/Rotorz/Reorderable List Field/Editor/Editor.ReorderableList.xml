<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Editor.ReorderableList</name>
  </assembly>
  <members>
    <member name="T:Rotorz.ReorderableList.AddMenuClickedEventArgs">
      <summary>
            Arguments which are passed to <see cref="T:Rotorz.ReorderableList.AddMenuClickedEventHandler" />.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.AddMenuClickedEventArgs.#ctor(Rotorz.ReorderableList.IReorderableListAdaptor,UnityEngine.Rect)">
      <summary>
            Initializes a new instance of <see cref="T:Rotorz.ReorderableList.ItemMovedEventArgs" />.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="buttonPosition">Position of the add menu button.</param>
    </member>
    <member name="P:Rotorz.ReorderableList.AddMenuClickedEventArgs.Adaptor">
      <summary>
            Gets adaptor to reorderable list container.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.AddMenuClickedEventArgs.ButtonPosition">
      <summary>
            Gets position of the add menu button.
            </summary>
    </member>
    <member name="T:Rotorz.ReorderableList.AddMenuClickedEventHandler">
      <summary>
            An event handler which is invoked when the "Add Menu" button is clicked.
            </summary>
      <param name="sender">Object which raised event.</param>
      <param name="args">Event arguments.</param>
    </member>
    <member name="T:Rotorz.ReorderableList.ElementAdderMenuBuilder">
      <summary>
             Factory methods that create <see cref="T:Rotorz.ReorderableList.IElementAdderMenuBuilder`1" />
             instances that can then be used to build element adder menus.
             </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.ElementAdderMenuBuilder.For``1">
      <summary>
            Gets a <see cref="T:Rotorz.ReorderableList.IElementAdderMenuBuilder`1" /> to build an element
            adder menu for a context object of the type <typeparamref name="TContext" />.
            </summary>
      <typeparam name="TContext">Type of the context object that elements can be added to.</typeparam>
      <returns>
            A new <see cref="T:Rotorz.ReorderableList.IElementAdderMenuBuilder`1" /> instance.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.ElementAdderMenuBuilder.For``1(System.Type)">
      <summary>
            Gets a <see cref="T:Rotorz.ReorderableList.IElementAdderMenuBuilder`1" /> to build an element
            adder menu for a context object of the type <typeparamref name="TContext" />.
            </summary>
      <param name="contractType">Contract type of addable elements.</param>
      <typeparam name="TContext">Type of the context object that elements can be added to.</typeparam>
      <returns>
            A new <see cref="T:Rotorz.ReorderableList.IElementAdderMenuBuilder`1" /> instance.
            </returns>
    </member>
    <member name="T:Rotorz.ReorderableList.ElementAdderMenuCommandAttribute">
      <summary>
             Annotate <see cref="T:Rotorz.ReorderableList.IElementAdderMenuCommand`1" /> implementations with a
             <see cref="T:Rotorz.ReorderableList.ElementAdderMenuCommandAttribute" /> to associate it with the contract
             type of addable elements.
             </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.ElementAdderMenuCommandAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Rotorz.ReorderableList.ElementAdderMenuCommandAttribute" /> class.
            </summary>
      <param name="contractType">Contract type of addable elements.</param>
    </member>
    <member name="P:Rotorz.ReorderableList.ElementAdderMenuCommandAttribute.ContractType">
      <summary>
            Gets the contract type of addable elements.
            </summary>
    </member>
    <member name="T:Rotorz.ReorderableList.ElementAdderMeta">
      <summary>
            Provides meta information which is useful when creating new implementations of
            the <see cref="T:Rotorz.ReorderableList.IElementAdderMenuBuilder`1" /> interface.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.ElementAdderMeta.GetConcreteElementTypes(System.Type)">
      <summary>
            Gets an array of all the concrete element types that implement the specified
            <paramref name="contractType" />.
            </summary>
      <param name="contractType">Contract type of addable elements.</param>
      <returns>
            An array of zero or more concrete element types.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="contractType" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:Rotorz.ReorderableList.ElementAdderMeta.GetConcreteElementTypes(System.Type,System.Func{System.Type,System.Boolean}[])">
      <summary>
            Gets a filtered array of the concrete element types that implement the
            specified <paramref name="contractType" />.
            </summary>
      <param name="contractType">Contract type of addable elements.</param>
      <param name="filters">An array of zero or more filters.</param>
      <returns>
            An array of zero or more concrete element types.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="contractType" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:Rotorz.ReorderableList.ElementAdderMeta.GetMenuCommands``1(System.Type)">
      <summary>
            Gets an array of <see cref="T:Rotorz.ReorderableList.IElementAdderMenuCommand`1" /> instances
            that are associated with the specified <paramref name="contractType" />.
            </summary>
      <param name="contractType">Contract type of addable elements.</param>
      <typeparam name="TContext">Type of the context object that elements can be added to.</typeparam>
      <returns>
            An array containing zero or more <see cref="T:Rotorz.ReorderableList.IElementAdderMenuCommand`1" /> instances.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="contractType" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:Rotorz.ReorderableList.ElementAdderMeta.GetMenuCommandTypes``1(System.Type)">
      <summary>
            Gets an array of the <see cref="T:Rotorz.ReorderableList.IElementAdderMenuCommand`1" /> types
            that are associated with the specified <paramref name="contractType" />.
            </summary>
      <param name="contractType">Contract type of addable elements.</param>
      <typeparam name="TContext">Type of the context object that elements can be added to.</typeparam>
      <returns>
            An array containing zero or more <see cref="T:System.Type" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="contractType" /> is <c>null</c>.
            </exception>
    </member>
    <member name="T:Rotorz.ReorderableList.GenericListAdaptor`1">
      <summary>
            Reorderable list adaptor for generic list.
            </summary>
      <typeparam name="T">Type of list element.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.GenericListAdaptor`1.#ctor(System.Collections.Generic.IList{`0},Rotorz.ReorderableList.ReorderableListControl.ItemDrawer{`0},System.Single)">
      <summary>
            Initializes a new instance of <see cref="T:Rotorz.ReorderableList.GenericListAdaptor`1" />.
            </summary>
      <param name="list">The list which can be reordered.</param>
      <param name="itemDrawer">Callback to draw list item.</param>
      <param name="itemHeight">Height of list item in pixels.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.GenericListAdaptor`1.Add">
      <summary>
            Add new element at end of list.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.GenericListAdaptor`1.BeginGUI">
      <summary>
            Occurs before any list items are drawn.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.GenericListAdaptor`1.CanDrag(System.Int32)">
      <summary>
            Determines whether an item can be reordered by dragging mouse.
            </summary>
      <param name="index">Zero-based index for list element.</param>
      <returns>
            A value of <c>true</c> if item can be dragged; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.GenericListAdaptor`1.CanRemove(System.Int32)">
      <summary>
            Determines whether an item can be removed from list.
            </summary>
      <param name="index">Zero-based index for list element.</param>
      <returns>
            A value of <c>true</c> if item can be removed; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.GenericListAdaptor`1.Clear">
      <summary>
            Clear all elements from list.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.GenericListAdaptor`1.Count">
      <summary>
            Gets count of elements in list.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.GenericListAdaptor`1.DrawItem(UnityEngine.Rect,System.Int32)">
      <summary>
            Draws main interface for a list item.
            </summary>
      <param name="position">Position in GUI.</param>
      <param name="index">Zero-based index of array element.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.GenericListAdaptor`1.DrawItemBackground(UnityEngine.Rect,System.Int32)">
      <summary>
            Draws background of a list item.
            </summary>
      <param name="position">Total position of list element in GUI.</param>
      <param name="index">Zero-based index of array element.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.GenericListAdaptor`1.Duplicate(System.Int32)">
      <summary>
            Duplicate existing element.
            </summary>
      <param name="index">Zero-based index of list element.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.GenericListAdaptor`1.EndGUI">
      <summary>
            Occurs after all list items have been drawn.
            </summary>
    </member>
    <member name="F:Rotorz.ReorderableList.GenericListAdaptor`1.FixedItemHeight">
      <summary>
            Fixed height of each list item.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.GenericListAdaptor`1.GetItemHeight(System.Int32)">
      <summary>
            Gets height of list item in pixels.
            </summary>
      <param name="index">Zero-based index of array element.</param>
      <returns>
            Measurement in pixels.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.GenericListAdaptor`1.Insert(System.Int32)">
      <summary>
            Insert new element at specified index.
            </summary>
      <param name="index">Zero-based index for list element.</param>
    </member>
    <member name="P:Rotorz.ReorderableList.GenericListAdaptor`1.Item(System.Int32)">
      <summary>
            Gets element from list.
            </summary>
      <param name="index">Zero-based index of element.</param>
      <returns>
            The element.
            </returns>
    </member>
    <member name="P:Rotorz.ReorderableList.GenericListAdaptor`1.List">
      <summary>
            Gets the underlying list data structure.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.GenericListAdaptor`1.Move(System.Int32,System.Int32)">
      <summary>
            Move element from source index to destination index.
            </summary>
      <param name="sourceIndex">Zero-based index of source element.</param>
      <param name="destIndex">Zero-based index of destination element.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.GenericListAdaptor`1.Remove(System.Int32)">
      <summary>
            Remove element at specified index.
            </summary>
      <param name="index">Zero-based index of list element.</param>
    </member>
    <member name="T:Rotorz.ReorderableList.IElementAdder`1">
      <summary>
            Interface for an object which adds elements to a context object of the type
            <typeparamref name="TContext" />.
            </summary>
      <typeparam name="TContext">Type of the context object that elements can be added to.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.IElementAdder`1.AddElement(System.Type)">
      <summary>
            Adds an element of the specified <paramref name="type" /> to the associated
            context object.
            </summary>
      <param name="type">Type of element to add.</param>
      <returns>
            The new element.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.IElementAdder`1.CanAddElement(System.Type)">
      <summary>
            Determines whether a new element of the specified <paramref name="type" /> can
            be added to the associated context object.
            </summary>
      <param name="type">Type of element to add.</param>
      <returns>
            A value of <c>true</c> if an element of the specified type can be added;
            otherwise, a value of <c>false</c>.
            </returns>
    </member>
    <member name="P:Rotorz.ReorderableList.IElementAdder`1.Object">
      <summary>
            Gets the context object.
            </summary>
    </member>
    <member name="T:Rotorz.ReorderableList.IElementAdderMenu">
      <summary>
            Interface for a menu interface.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.IElementAdderMenu.DropDown(UnityEngine.Rect)">
      <summary>
            Displays the drop-down menu inside an editor GUI.
            </summary>
      <param name="position">Position of menu button in the GUI.</param>
    </member>
    <member name="P:Rotorz.ReorderableList.IElementAdderMenu.IsEmpty">
      <summary>
            Gets a value indicating whether the menu contains any items.
            </summary>
    </member>
    <member name="T:Rotorz.ReorderableList.IElementAdderMenuBuilder`1">
      <summary>
            Interface for building an <see cref="T:Rotorz.ReorderableList.IElementAdderMenu" />.
            </summary>
      <typeparam name="TContext">Type of the context object that elements can be added to.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.IElementAdderMenuBuilder`1.AddCustomCommand(Rotorz.ReorderableList.IElementAdderMenuCommand{`0})">
      <summary>
            Adds a custom command to the menu.
            </summary>
      <param name="command">The custom command.</param>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="command" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:Rotorz.ReorderableList.IElementAdderMenuBuilder`1.AddTypeFilter(System.Func{System.Type,System.Boolean})">
      <summary>
            Adds a filter function which determines whether types can be included or
            whether they need to be excluded.
            </summary>
      <param name="typeFilter">Filter function.</param>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="typeFilter" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:Rotorz.ReorderableList.IElementAdderMenuBuilder`1.GetMenu">
      <summary>
            Builds and returns a new <see cref="T:Rotorz.ReorderableList.IElementAdderMenu" /> instance.
            </summary>
      <returns>
            A new <see cref="T:Rotorz.ReorderableList.IElementAdderMenu" /> instance each time the method is invoked.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.IElementAdderMenuBuilder`1.SetContractType(System.Type)">
      <summary>
            Sets contract type of the elements that can be included in the <see cref="T:Rotorz.ReorderableList.IElementAdderMenu" />.
            Only non-abstract class types that are assignable from the <paramref name="contractType" />
            will be included in the built menu.
            </summary>
      <param name="contractType">Contract type of addable elements.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.IElementAdderMenuBuilder`1.SetElementAdder(Rotorz.ReorderableList.IElementAdder{`0})">
      <summary>
            Set the <see cref="T:Rotorz.ReorderableList.IElementAdder`1" /> implementation which is used
            when adding new elements to the context object.
            </summary>
      <param name="elementAdder">Element adder.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.IElementAdderMenuBuilder`1.SetTypeDisplayNameFormatter(System.Func{System.Type,System.String})">
      <summary>
            Set the function that formats the display of type names in the user interface.
            </summary>
      <param name="formatter">Function that formats display name of type; or <c>null</c>.</param>
    </member>
    <member name="T:Rotorz.ReorderableList.IElementAdderMenuCommand`1">
      <summary>
            Interface for a menu command that can be included in an <see cref="T:Rotorz.ReorderableList.IElementAdderMenu" />
            either by annotating an implementation of the <see cref="T:Rotorz.ReorderableList.IElementAdderMenuCommand`1" />
            interface with <see cref="T:Rotorz.ReorderableList.ElementAdderMenuCommandAttribute" /> or directly by
            calling <see cref="M:Rotorz.ReorderableList.IElementAdderMenuBuilder`1.AddCustomCommand(Rotorz.ReorderableList.IElementAdderMenuCommand{`0})" />.
            </summary>
      <typeparam name="TContext">Type of the context object that elements can be added to.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.IElementAdderMenuCommand`1.CanExecute(Rotorz.ReorderableList.IElementAdder{`0})">
      <summary>
            Determines whether the command can be executed.
            </summary>
      <param name="elementAdder">The associated element adder provides access to
            the <typeparamref name="TContext" /> instance.</param>
      <returns>
            A value of <c>true</c> if the command can execute; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Rotorz.ReorderableList.IElementAdderMenuCommand`1.Content">
      <summary>
            Gets the content of the menu command.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.IElementAdderMenuCommand`1.Execute(Rotorz.ReorderableList.IElementAdder{`0})">
      <summary>
            Executes the command.
            </summary>
      <param name="elementAdder">The associated element adder provides access to
            the <typeparamref name="TContext" /> instance.</param>
    </member>
    <member name="T:Rotorz.ReorderableList.IReorderableListAdaptor">
      <summary>
            Adaptor allowing reorderable list control to interface with list data.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.IReorderableListAdaptor.Add">
      <summary>
            Add new element at end of list.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.IReorderableListAdaptor.BeginGUI">
      <summary>
            Occurs before any list items are drawn.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.IReorderableListAdaptor.CanDrag(System.Int32)">
      <summary>
            Determines whether an item can be reordered by dragging mouse.
            </summary>
      <param name="index">Zero-based index for list element.</param>
      <returns>
            A value of <c>true</c> if item can be dragged; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.IReorderableListAdaptor.CanRemove(System.Int32)">
      <summary>
            Determines whether an item can be removed from list.
            </summary>
      <param name="index">Zero-based index for list element.</param>
      <returns>
            A value of <c>true</c> if item can be removed; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.IReorderableListAdaptor.Clear">
      <summary>
            Clear all elements from list.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.IReorderableListAdaptor.Count">
      <summary>
            Gets count of elements in list.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.IReorderableListAdaptor.DrawItem(UnityEngine.Rect,System.Int32)">
      <summary>
            Draws main interface for a list item.
            </summary>
      <param name="position">Position in GUI.</param>
      <param name="index">Zero-based index of array element.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.IReorderableListAdaptor.DrawItemBackground(UnityEngine.Rect,System.Int32)">
      <summary>
            Draws background of a list item.
            </summary>
      <param name="position">Total position of list element in GUI.</param>
      <param name="index">Zero-based index of array element.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.IReorderableListAdaptor.Duplicate(System.Int32)">
      <summary>
            Duplicate existing element.
            </summary>
      <param name="index">Zero-based index of list element.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.IReorderableListAdaptor.EndGUI">
      <summary>
            Occurs after all list items have been drawn.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.IReorderableListAdaptor.GetItemHeight(System.Int32)">
      <summary>
            Gets height of list item in pixels.
            </summary>
      <param name="index">Zero-based index of array element.</param>
      <returns>
            Measurement in pixels.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.IReorderableListAdaptor.Insert(System.Int32)">
      <summary>
            Insert new element at specified index.
            </summary>
      <param name="index">Zero-based index for list element.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.IReorderableListAdaptor.Move(System.Int32,System.Int32)">
      <summary>
            Move element from source index to destination index.
            </summary>
      <param name="sourceIndex">Zero-based index of source element.</param>
      <param name="destIndex">Zero-based index of destination element.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.IReorderableListAdaptor.Remove(System.Int32)">
      <summary>
            Remove element at specified index.
            </summary>
      <param name="index">Zero-based index of list element.</param>
    </member>
    <member name="T:Rotorz.ReorderableList.IReorderableListDropTarget">
      <summary>
            Can be implemented along with <see cref="T:Rotorz.ReorderableList.IReorderableListAdaptor" /> when drop
            insertion or ordering is desired.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.IReorderableListDropTarget.CanDropInsert(System.Int32)">
      <summary>
            Determines whether an item is being dragged and that it can be inserted
            or moved by dropping somewhere into the reorderable list control.
            </summary>
      <param name="insertionIndex">Zero-based index of insertion.</param>
      <returns>
            A value of <c>true</c> if item can be dropped; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.IReorderableListDropTarget.ProcessDropInsertion(System.Int32)">
      <summary>
            Processes the current drop insertion operation when <see cref="M:Rotorz.ReorderableList.IReorderableListDropTarget.CanDropInsert(System.Int32)" />
            returns a value of <c>true</c> to process, accept or cancel.
            </summary>
      <param name="insertionIndex">Zero-based index of insertion.</param>
    </member>
    <member name="T:Rotorz.ReorderableList.ItemInsertedEventArgs">
      <summary>
            Arguments which are passed to <see cref="T:Rotorz.ReorderableList.ItemInsertedEventHandler" />.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.ItemInsertedEventArgs.#ctor(Rotorz.ReorderableList.IReorderableListAdaptor,System.Int32,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Rotorz.ReorderableList.ItemInsertedEventArgs" />.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="itemIndex">Zero-based index of item.</param>
      <param name="wasDuplicated">Indicates if inserted item was duplicated from another item.</param>
    </member>
    <member name="P:Rotorz.ReorderableList.ItemInsertedEventArgs.Adaptor">
      <summary>
            Gets adaptor to reorderable list container which contains element.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ItemInsertedEventArgs.ItemIndex">
      <summary>
            Gets zero-based index of item which was inserted.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ItemInsertedEventArgs.WasDuplicated">
      <summary>
            Indicates if inserted item was duplicated from another item.
            </summary>
    </member>
    <member name="T:Rotorz.ReorderableList.ItemInsertedEventHandler">
      <summary>
            An event handler which is invoked after new list item is inserted.
            </summary>
      <param name="sender">Object which raised event.</param>
      <param name="args">Event arguments.</param>
    </member>
    <member name="T:Rotorz.ReorderableList.ItemMovedEventArgs">
      <summary>
            Arguments which are passed to <see cref="T:Rotorz.ReorderableList.ItemMovedEventHandler" />.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.ItemMovedEventArgs.#ctor(Rotorz.ReorderableList.IReorderableListAdaptor,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of <see cref="T:Rotorz.ReorderableList.ItemMovedEventArgs" />.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="oldItemIndex">Old zero-based index of item.</param>
      <param name="newItemIndex">New zero-based index of item.</param>
    </member>
    <member name="P:Rotorz.ReorderableList.ItemMovedEventArgs.Adaptor">
      <summary>
            Gets adaptor to reorderable list container which contains element.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ItemMovedEventArgs.NewItemIndex">
      <summary>
            Gets new zero-based index of the item which was moved.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ItemMovedEventArgs.OldItemIndex">
      <summary>
            Gets old zero-based index of the item which was moved.
            </summary>
    </member>
    <member name="T:Rotorz.ReorderableList.ItemMovedEventHandler">
      <summary>
            An event handler which is invoked after a list item is moved.
            </summary>
      <param name="sender">Object which raised event.</param>
      <param name="args">Event arguments.</param>
    </member>
    <member name="T:Rotorz.ReorderableList.ItemMovingEventArgs">
      <summary>
            Arguments which are passed to <see cref="T:Rotorz.ReorderableList.ItemMovingEventHandler" />.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.ItemMovingEventArgs.#ctor(Rotorz.ReorderableList.IReorderableListAdaptor,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of <see cref="T:Rotorz.ReorderableList.ItemMovingEventArgs" />.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="itemIndex">Zero-based index of item.</param>
      <param name="destinationItemIndex">Xero-based index of item destination.</param>
    </member>
    <member name="P:Rotorz.ReorderableList.ItemMovingEventArgs.Adaptor">
      <summary>
            Gets adaptor to reorderable list container which contains element.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ItemMovingEventArgs.DestinationItemIndex">
      <summary>
            Gets the new candidate zero-based index for the item.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ItemMovingEventArgs.ItemIndex">
      <summary>
            Gets current zero-based index of item which is going to be moved.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ItemMovingEventArgs.NewItemIndex">
      <summary>
            Gets zero-based index of item <strong>after</strong> it has been moved.
            </summary>
    </member>
    <member name="T:Rotorz.ReorderableList.ItemMovingEventHandler">
      <summary>
            An event handler which is invoked before a list item is moved.
            </summary>
      <param name="sender">Object which raised event.</param>
      <param name="args">Event arguments.</param>
    </member>
    <member name="T:Rotorz.ReorderableList.ItemRemovingEventArgs">
      <summary>
            Arguments which are passed to <see cref="T:Rotorz.ReorderableList.ItemRemovingEventHandler" />.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.ItemRemovingEventArgs.#ctor(Rotorz.ReorderableList.IReorderableListAdaptor,System.Int32)">
      <summary>
            Initializes a new instance of <see cref="T:Rotorz.ReorderableList.ItemRemovingEventArgs" />.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="itemIndex">Zero-based index of item.</param>
    </member>
    <member name="P:Rotorz.ReorderableList.ItemRemovingEventArgs.Adaptor">
      <summary>
            Gets adaptor to reorderable list container which contains element.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ItemRemovingEventArgs.ItemIndex">
      <summary>
            Gets zero-based index of item which is being removed.
            </summary>
    </member>
    <member name="T:Rotorz.ReorderableList.ItemRemovingEventHandler">
      <summary>
            An event handler which is invoked before a list item is removed.
            </summary>
      <param name="sender">Object which raised event.</param>
      <param name="args">Event arguments.</param>
    </member>
    <member name="T:Rotorz.ReorderableList.ReorderableListControl">
      <summary>
            Base class for custom reorderable list control.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Rotorz.ReorderableList.ReorderableListControl" />.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.#ctor(Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Initializes a new instance of <see cref="T:Rotorz.ReorderableList.ReorderableListControl" />.
            </summary>
      <param name="flags">Optional flags which affect behavior of control.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.AddItem(Rotorz.ReorderableList.IReorderableListAdaptor)">
      <summary>
            Add item at end of list and raises the event <see cref="E:Rotorz.ReorderableList.ReorderableListControl.ItemInserted" />.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.AddItemsToMenu(UnityEditor.GenericMenu,System.Int32,Rotorz.ReorderableList.IReorderableListAdaptor)">
      <summary>
            Invoked to generate context menu for list item.
            </summary>
      <param name="menu">Menu which can be populated.</param>
      <param name="itemIndex">Zero-based index of item which was right-clicked.</param>
      <param name="adaptor">Reorderable list adaptor.</param>
    </member>
    <member name="E:Rotorz.ReorderableList.ReorderableListControl.AddMenuClicked">
      <summary>
            Occurs when add menu button is clicked.
            </summary>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListControl.AnchorBackgroundColor">
      <summary>
            Background color of anchor list item.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.CalculateListHeight(Rotorz.ReorderableList.IReorderableListAdaptor)">
      <summary>
            Calculate height of list control in pixels.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
      <returns>
            Required list height in pixels.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.CalculateListHeight(System.Int32,System.Single)">
      <summary>
            Calculate height of list control in pixels.
            </summary>
      <param name="itemCount">Count of items in list.</param>
      <param name="itemHeight">Fixed height of list item.</param>
      <returns>
            Required list height in pixels.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.ClearAll(Rotorz.ReorderableList.IReorderableListAdaptor)">
      <summary>
            Remove all items from list.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
      <returns>
            Returns a value of <c>false</c> if operation was cancelled.
            </returns>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListControl.CommandClearAll">
      <summary>
            Content for "Clear All" command.
            </summary>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListControl.CommandDuplicate">
      <summary>
            Content for "Duplicate" command.
            </summary>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListControl.CommandInsertAbove">
      <summary>
            Content for "Insert Above" command.
            </summary>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListControl.CommandInsertBelow">
      <summary>
            Content for "Insert Below" command.
            </summary>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListControl.CommandMoveToBottom">
      <summary>
            Content for "Move to Bottom" command.
            </summary>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListControl.CommandMoveToTop">
      <summary>
            Content for "Move to Top" command.
            </summary>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListControl.CommandRemove">
      <summary>
            Content for "Remove" command.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListControl.ContainerStyle">
      <summary>
            Gets or sets style used to draw background of list control.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListControl.CurrentItemTotalPosition">
      <summary>
            Gets the total position of the list item that is currently being drawn.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListControl.CurrentListControlID">
      <summary>
            Gets the control ID of the list that is currently being drawn.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListControl.CurrentListPosition">
      <summary>
            Gets the position of the list control that is currently being drawn.
            </summary>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListControl.DefaultContextHandler">
      <summary>
            Default functionality to handle context command.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.DoCommand(System.String,System.Int32,Rotorz.ReorderableList.IReorderableListAdaptor)">
      <summary>
            Call to manually perform command.
            </summary>
      <param name="commandName">Name of command. This is the text shown in the context menu.</param>
      <param name="itemIndex">Zero-based index of item which was right-clicked.</param>
      <param name="adaptor">Reorderable list adaptor.</param>
      <returns>
            A value of <c>true</c> if command was known; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.DoCommand(UnityEngine.GUIContent,System.Int32,Rotorz.ReorderableList.IReorderableListAdaptor)">
      <summary>
            Call to manually perform command.
            </summary>
      <param name="command">Content representing command.</param>
      <param name="itemIndex">Zero-based index of item which was right-clicked.</param>
      <param name="adaptor">Reorderable list adaptor.</param>
      <returns>
            A value of <c>true</c> if command was known; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.Draw(Rotorz.ReorderableList.IReorderableListAdaptor)">
      <summary>
            Draw layout version of list control.
            </summary>
      <param name="controlID">Unique ID of list control.</param>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="drawEmpty">Delegate for drawing empty list.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.Draw(Rotorz.ReorderableList.IReorderableListAdaptor,Rotorz.ReorderableList.ReorderableListControl.DrawEmpty)">
      <summary>
            Draw layout version of list control.
            </summary>
      <param name="controlID">Unique ID of list control.</param>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="drawEmpty">Delegate for drawing empty list.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.Draw(UnityEngine.Rect,Rotorz.ReorderableList.IReorderableListAdaptor)">
      <summary>
            Draw list control with absolute positioning.
            </summary>
      <param name="position">Position of list control in GUI.</param>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="drawEmpty">Delegate for drawing empty list.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.Draw(UnityEngine.Rect,Rotorz.ReorderableList.IReorderableListAdaptor,Rotorz.ReorderableList.ReorderableListControl.DrawEmptyAbsolute)">
      <summary>
            Draw list control with absolute positioning.
            </summary>
      <param name="position">Position of list control in GUI.</param>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="drawEmpty">Delegate for drawing empty list.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.DrawControlFromState(Rotorz.ReorderableList.IReorderableListAdaptor,Rotorz.ReorderableList.ReorderableListControl.DrawEmpty,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Generate and draw control from state object.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="drawEmpty">Delegate for drawing empty list.</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.DrawControlFromState(UnityEngine.Rect,Rotorz.ReorderableList.IReorderableListAdaptor,Rotorz.ReorderableList.ReorderableListControl.DrawEmptyAbsolute,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Generate and draw control from state object.
            </summary>
      <param name="position">Position of control.</param>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="drawEmpty">Delegate for drawing empty list.</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.DrawDropIndicator(UnityEngine.Rect)">
      <summary>
            Draws drop insertion indicator.
            </summary>
      <param name="position">Position if the drop indicator.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.DuplicateItem(Rotorz.ReorderableList.IReorderableListAdaptor,System.Int32)">
      <summary>
            Duplicate specified item and raises the event <see cref="E:Rotorz.ReorderableList.ReorderableListControl.ItemInserted" />.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="itemIndex">Zero-based index of item.</param>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListControl.Flags">
      <summary>
            Gets or sets flags which affect behavior of control.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListControl.FooterButtonStyle">
      <summary>
            Gets or sets style used to draw footer buttons.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.HandleCommand(System.String,System.Int32,Rotorz.ReorderableList.IReorderableListAdaptor)">
      <summary>
            Invoked to handle context command.
            </summary>
      <param name="commandName">Name of command. This is the text shown in the context menu.</param>
      <param name="itemIndex">Zero-based index of item which was right-clicked.</param>
      <param name="adaptor">Reorderable list adaptor.</param>
      <returns>
            A value of <c>true</c> if command was known; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListControl.HorizontalLineAtEnd">
      <summary>
            Gets or sets a boolean value indicating whether a horizontal line should be
            shown below the last list item at the end of the list control.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListControl.HorizontalLineAtStart">
      <summary>
            Gets or sets a boolean value indicating whether a horizontal line should be
            shown above the first list item at the start of the list control.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListControl.HorizontalLineColor">
      <summary>
            Gets or sets the color of the horizontal lines that appear between list items.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.InsertItem(Rotorz.ReorderableList.IReorderableListAdaptor,System.Int32)">
      <summary>
            Insert item at specified index and raises the event <see cref="E:Rotorz.ReorderableList.ReorderableListControl.ItemInserted" />.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="itemIndex">Zero-based index of item.</param>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListControl.ItemButtonStyle">
      <summary>
            Gets or sets style used to draw list item buttons (like the remove button).
            </summary>
    </member>
    <member name="E:Rotorz.ReorderableList.ReorderableListControl.ItemInserted">
      <summary>
            Occurs after list item is inserted or duplicated.
            </summary>
    </member>
    <member name="E:Rotorz.ReorderableList.ReorderableListControl.ItemMoved">
      <summary>
            Occurs after list item has been moved.
            </summary>
    </member>
    <member name="E:Rotorz.ReorderableList.ReorderableListControl.ItemMoving">
      <summary>
            Occurs immediately before list item is moved allowing for move operation to be cancelled.
            </summary>
    </member>
    <member name="E:Rotorz.ReorderableList.ReorderableListControl.ItemRemoving">
      <summary>
            Occurs before list item is removed and allowing for remove operation to be cancelled.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.MoveItem(Rotorz.ReorderableList.IReorderableListAdaptor,System.Int32,System.Int32)">
      <summary>
            Move item from source index to destination index.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="sourceIndex">Zero-based index of source item.</param>
      <param name="destIndex">Zero-based index of destination index.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.OnAddMenuClicked(Rotorz.ReorderableList.AddMenuClickedEventArgs)">
      <summary>
            Raises event when add menu button is clicked.
            </summary>
      <param name="args">Event arguments.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.OnItemInserted(Rotorz.ReorderableList.ItemInsertedEventArgs)">
      <summary>
            Raises event after list item is inserted or duplicated.
            </summary>
      <param name="args">Event arguments.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.OnItemMoved(Rotorz.ReorderableList.ItemMovedEventArgs)">
      <summary>
            Raises event after list item has been moved.
            </summary>
      <param name="args">Event arguments.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.OnItemMoving(Rotorz.ReorderableList.ItemMovingEventArgs)">
      <summary>
            Raises event immediately before list item is moved and provides oppertunity to cancel.
            </summary>
      <param name="args">Event arguments.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.OnItemRemoving(Rotorz.ReorderableList.ItemRemovingEventArgs)">
      <summary>
            Raises event before list item is removed and provides oppertunity to cancel.
            </summary>
      <param name="args">Event arguments.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListControl.RemoveItem(Rotorz.ReorderableList.IReorderableListAdaptor,System.Int32)">
      <summary>
            Remove specified item.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="itemIndex">Zero-based index of item.</param>
      <returns>
            Returns a value of <c>false</c> if operation was cancelled.
            </returns>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListControl.TargetBackgroundColor">
      <summary>
            Background color of target slot when dragging list item.
            </summary>
    </member>
    <member name="T:Rotorz.ReorderableList.ReorderableListControl.DrawEmpty">
      <summary>
            Invoked to draw content for empty list.
            </summary>
    </member>
    <member name="T:Rotorz.ReorderableList.ReorderableListControl.DrawEmptyAbsolute">
      <summary>
            Invoked to draw content for empty list with absolute positioning.
            </summary>
      <param name="position">Position of empty content.</param>
    </member>
    <member name="T:Rotorz.ReorderableList.ReorderableListControl.ItemDrawer`1">
      <summary>
            Invoked to draw list item.
            </summary>
      <param name="position">Position of list item.</param>
      <param name="item">The list item.</param>
      <typeparam name="T">Type of item list.</typeparam>
      <returns>
            The modified value.
            </returns>
    </member>
    <member name="T:Rotorz.ReorderableList.ReorderableListFlags">
      <summary>
            Additional flags which can be passed into reorderable list field.
            </summary>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListFlags.DisableReordering">
      <summary>
            Hide grab handles and disable reordering of list items.
            </summary>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListFlags.HideAddButton">
      <summary>
            Hide add button at base of control.
            </summary>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListFlags.HideRemoveButtons">
      <summary>
            Hide remove buttons from list items.
            </summary>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListFlags.DisableContextMenu">
      <summary>
            Do not display context menu upon right-clicking grab handle.
            </summary>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListFlags.DisableDuplicateCommand">
      <summary>
            Hide "Duplicate" option from context menu.
            </summary>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListFlags.DisableAutoFocus">
      <summary>
            Do not automatically focus first control of newly added items.
            </summary>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListFlags.ShowIndices">
      <summary>
            Show zero-based index of array elements.
            </summary>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListFlags.DisableClipping">
      <summary>
            Do not attempt to clip items which are out of view.
            </summary>
    </member>
    <member name="T:Rotorz.ReorderableList.ReorderableListGUI">
      <summary>
            Utility class for drawing reorderable lists.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.CalculateListFieldHeight(Rotorz.ReorderableList.IReorderableListAdaptor)">
      <summary>
            Calculate height of list field for adapted collection.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <returns>
            Required list height in pixels.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.CalculateListFieldHeight(Rotorz.ReorderableList.IReorderableListAdaptor,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Calculate height of list field for adapted collection.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <returns>
            Required list height in pixels.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.CalculateListFieldHeight(System.Int32)">
      <summary>
            Calculate height of list field for absolute positioning.
            </summary>
      <param name="itemCount">Count of items in list.</param>
      <param name="itemHeight">Fixed height of list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <returns>
            Required list height in pixels.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.CalculateListFieldHeight(System.Int32,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Calculate height of list field for absolute positioning.
            </summary>
      <param name="itemCount">Count of items in list.</param>
      <param name="itemHeight">Fixed height of list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <returns>
            Required list height in pixels.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.CalculateListFieldHeight(System.Int32,System.Single)">
      <summary>
            Calculate height of list field for absolute positioning.
            </summary>
      <param name="itemCount">Count of items in list.</param>
      <param name="itemHeight">Fixed height of list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <returns>
            Required list height in pixels.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.CalculateListFieldHeight(System.Int32,System.Single,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Calculate height of list field for absolute positioning.
            </summary>
      <param name="itemCount">Count of items in list.</param>
      <param name="itemHeight">Fixed height of list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <returns>
            Required list height in pixels.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.CalculateListFieldHeight(UnityEditor.SerializedProperty)">
      <summary>
            Calculate height of list field for absolute positioning.
            </summary>
      <param name="arrayProperty">Serializable property.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <returns>
            Required list height in pixels.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.CalculateListFieldHeight(UnityEditor.SerializedProperty,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Calculate height of list field for absolute positioning.
            </summary>
      <param name="arrayProperty">Serializable property.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <returns>
            Required list height in pixels.
            </returns>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListGUI.CurrentItemIndex">
      <summary>
            Gets the zero-based index of the list item that is currently being drawn;
            or a value of -1 if no item is currently being drawn.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListGUI.CurrentItemTotalPosition">
      <summary>
            Gets the total position of the list item that is currently being drawn.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListGUI.CurrentListControlID">
      <summary>
            Gets the control ID of the list that is currently being drawn.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListGUI.CurrentListPosition">
      <summary>
            Gets the position of the list control that is currently being drawn.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.DefaultItemDrawer``1(UnityEngine.Rect,``0)">
      <summary>
            Default list item drawer implementation.
            </summary>
      <param name="position">Position to draw list item control(s).</param>
      <param name="item">Value of list item.</param>
      <typeparam name="T">Type of list item.</typeparam>
      <returns>
            Unmodified value of list item.
            </returns>
    </member>
    <member name="F:Rotorz.ReorderableList.ReorderableListGUI.DefaultItemHeight">
      <summary>
            Default list item height is 18 pixels.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListGUI.IndexOfChangedItem">
      <summary>
            Gets or sets the zero-based index of the last item that was changed. A value of -1
            indicates that no item was changed by list.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField(Rotorz.ReorderableList.IReorderableListAdaptor)">
      <summary>
            Draw list field control for adapted collection.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField(Rotorz.ReorderableList.IReorderableListAdaptor,Rotorz.ReorderableList.ReorderableListControl.DrawEmpty)">
      <summary>
            Draw list field control for adapted collection.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField(Rotorz.ReorderableList.IReorderableListAdaptor,Rotorz.ReorderableList.ReorderableListControl.DrawEmpty,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control for adapted collection.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField(Rotorz.ReorderableList.IReorderableListAdaptor,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control for adapted collection.
            </summary>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField``1(System.Collections.Generic.IList{``0},Rotorz.ReorderableList.ReorderableListControl.ItemDrawer{``0})">
      <summary>
            Draw list field control.
            </summary>
      <param name="list">The list which can be reordered.</param>
      <param name="drawItem">Callback to draw list item.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="itemHeight">Height of a single list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <typeparam name="T">Type of list item.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField``1(System.Collections.Generic.IList{``0},Rotorz.ReorderableList.ReorderableListControl.ItemDrawer{``0},Rotorz.ReorderableList.ReorderableListControl.DrawEmpty)">
      <summary>
            Draw list field control.
            </summary>
      <param name="list">The list which can be reordered.</param>
      <param name="drawItem">Callback to draw list item.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="itemHeight">Height of a single list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <typeparam name="T">Type of list item.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField``1(System.Collections.Generic.IList{``0},Rotorz.ReorderableList.ReorderableListControl.ItemDrawer{``0},Rotorz.ReorderableList.ReorderableListControl.DrawEmpty,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control.
            </summary>
      <param name="list">The list which can be reordered.</param>
      <param name="drawItem">Callback to draw list item.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="itemHeight">Height of a single list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <typeparam name="T">Type of list item.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField``1(System.Collections.Generic.IList{``0},Rotorz.ReorderableList.ReorderableListControl.ItemDrawer{``0},Rotorz.ReorderableList.ReorderableListControl.DrawEmpty,System.Single)">
      <summary>
            Draw list field control.
            </summary>
      <param name="list">The list which can be reordered.</param>
      <param name="drawItem">Callback to draw list item.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="itemHeight">Height of a single list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <typeparam name="T">Type of list item.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField``1(System.Collections.Generic.IList{``0},Rotorz.ReorderableList.ReorderableListControl.ItemDrawer{``0},Rotorz.ReorderableList.ReorderableListControl.DrawEmpty,System.Single,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control.
            </summary>
      <param name="list">The list which can be reordered.</param>
      <param name="drawItem">Callback to draw list item.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="itemHeight">Height of a single list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <typeparam name="T">Type of list item.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField``1(System.Collections.Generic.IList{``0},Rotorz.ReorderableList.ReorderableListControl.ItemDrawer{``0},Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control.
            </summary>
      <param name="list">The list which can be reordered.</param>
      <param name="drawItem">Callback to draw list item.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="itemHeight">Height of a single list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <typeparam name="T">Type of list item.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField``1(System.Collections.Generic.IList{``0},Rotorz.ReorderableList.ReorderableListControl.ItemDrawer{``0},System.Single)">
      <summary>
            Draw list field control.
            </summary>
      <param name="list">The list which can be reordered.</param>
      <param name="drawItem">Callback to draw list item.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="itemHeight">Height of a single list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <typeparam name="T">Type of list item.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField``1(System.Collections.Generic.IList{``0},Rotorz.ReorderableList.ReorderableListControl.ItemDrawer{``0},System.Single,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control.
            </summary>
      <param name="list">The list which can be reordered.</param>
      <param name="drawItem">Callback to draw list item.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="itemHeight">Height of a single list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <typeparam name="T">Type of list item.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField(UnityEditor.SerializedProperty)">
      <summary>
            Draw list field control for serializable property array.
            </summary>
      <param name="arrayProperty">Serializable property.</param>
      <param name="fixedItemHeight">Use fixed height for items rather than <see cref="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)" />.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField(UnityEditor.SerializedProperty,Rotorz.ReorderableList.ReorderableListControl.DrawEmpty)">
      <summary>
            Draw list field control for serializable property array.
            </summary>
      <param name="arrayProperty">Serializable property.</param>
      <param name="fixedItemHeight">Use fixed height for items rather than <see cref="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)" />.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField(UnityEditor.SerializedProperty,Rotorz.ReorderableList.ReorderableListControl.DrawEmpty,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control for serializable property array.
            </summary>
      <param name="arrayProperty">Serializable property.</param>
      <param name="fixedItemHeight">Use fixed height for items rather than <see cref="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)" />.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField(UnityEditor.SerializedProperty,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control for serializable property array.
            </summary>
      <param name="arrayProperty">Serializable property.</param>
      <param name="fixedItemHeight">Use fixed height for items rather than <see cref="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)" />.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField(UnityEditor.SerializedProperty,System.Single)">
      <summary>
            Draw list field control for serializable property array.
            </summary>
      <param name="arrayProperty">Serializable property.</param>
      <param name="fixedItemHeight">Use fixed height for items rather than <see cref="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)" />.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField(UnityEditor.SerializedProperty,System.Single,Rotorz.ReorderableList.ReorderableListControl.DrawEmpty)">
      <summary>
            Draw list field control for serializable property array.
            </summary>
      <param name="arrayProperty">Serializable property.</param>
      <param name="fixedItemHeight">Use fixed height for items rather than <see cref="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)" />.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField(UnityEditor.SerializedProperty,System.Single,Rotorz.ReorderableList.ReorderableListControl.DrawEmpty,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control for serializable property array.
            </summary>
      <param name="arrayProperty">Serializable property.</param>
      <param name="fixedItemHeight">Use fixed height for items rather than <see cref="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)" />.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListField(UnityEditor.SerializedProperty,System.Single,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control for serializable property array.
            </summary>
      <param name="arrayProperty">Serializable property.</param>
      <param name="fixedItemHeight">Use fixed height for items rather than <see cref="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)" />.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute(UnityEngine.Rect,Rotorz.ReorderableList.IReorderableListAdaptor)">
      <summary>
            Draw list field control for adapted collection.
            </summary>
      <param name="position">Position of control.</param>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute(UnityEngine.Rect,Rotorz.ReorderableList.IReorderableListAdaptor,Rotorz.ReorderableList.ReorderableListControl.DrawEmptyAbsolute)">
      <summary>
            Draw list field control for adapted collection.
            </summary>
      <param name="position">Position of control.</param>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute(UnityEngine.Rect,Rotorz.ReorderableList.IReorderableListAdaptor,Rotorz.ReorderableList.ReorderableListControl.DrawEmptyAbsolute,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control for adapted collection.
            </summary>
      <param name="position">Position of control.</param>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute(UnityEngine.Rect,Rotorz.ReorderableList.IReorderableListAdaptor,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control for adapted collection.
            </summary>
      <param name="position">Position of control.</param>
      <param name="adaptor">Reorderable list adaptor.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute``1(UnityEngine.Rect,System.Collections.Generic.IList{``0},Rotorz.ReorderableList.ReorderableListControl.ItemDrawer{``0})">
      <summary>
            Draw list field control with absolute positioning.
            </summary>
      <param name="position">Position of control.</param>
      <param name="list">The list which can be reordered.</param>
      <param name="drawItem">Callback to draw list item.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="itemHeight">Height of a single list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <typeparam name="T">Type of list item.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute``1(UnityEngine.Rect,System.Collections.Generic.IList{``0},Rotorz.ReorderableList.ReorderableListControl.ItemDrawer{``0},Rotorz.ReorderableList.ReorderableListControl.DrawEmptyAbsolute)">
      <summary>
            Draw list field control with absolute positioning.
            </summary>
      <param name="position">Position of control.</param>
      <param name="list">The list which can be reordered.</param>
      <param name="drawItem">Callback to draw list item.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="itemHeight">Height of a single list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <typeparam name="T">Type of list item.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute``1(UnityEngine.Rect,System.Collections.Generic.IList{``0},Rotorz.ReorderableList.ReorderableListControl.ItemDrawer{``0},Rotorz.ReorderableList.ReorderableListControl.DrawEmptyAbsolute,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control with absolute positioning.
            </summary>
      <param name="position">Position of control.</param>
      <param name="list">The list which can be reordered.</param>
      <param name="drawItem">Callback to draw list item.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="itemHeight">Height of a single list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <typeparam name="T">Type of list item.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute``1(UnityEngine.Rect,System.Collections.Generic.IList{``0},Rotorz.ReorderableList.ReorderableListControl.ItemDrawer{``0},Rotorz.ReorderableList.ReorderableListControl.DrawEmptyAbsolute,System.Single)">
      <summary>
            Draw list field control with absolute positioning.
            </summary>
      <param name="position">Position of control.</param>
      <param name="list">The list which can be reordered.</param>
      <param name="drawItem">Callback to draw list item.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="itemHeight">Height of a single list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <typeparam name="T">Type of list item.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute``1(UnityEngine.Rect,System.Collections.Generic.IList{``0},Rotorz.ReorderableList.ReorderableListControl.ItemDrawer{``0},Rotorz.ReorderableList.ReorderableListControl.DrawEmptyAbsolute,System.Single,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control with absolute positioning.
            </summary>
      <param name="position">Position of control.</param>
      <param name="list">The list which can be reordered.</param>
      <param name="drawItem">Callback to draw list item.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="itemHeight">Height of a single list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <typeparam name="T">Type of list item.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute``1(UnityEngine.Rect,System.Collections.Generic.IList{``0},Rotorz.ReorderableList.ReorderableListControl.ItemDrawer{``0},Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control with absolute positioning.
            </summary>
      <param name="position">Position of control.</param>
      <param name="list">The list which can be reordered.</param>
      <param name="drawItem">Callback to draw list item.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="itemHeight">Height of a single list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <typeparam name="T">Type of list item.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute``1(UnityEngine.Rect,System.Collections.Generic.IList{``0},Rotorz.ReorderableList.ReorderableListControl.ItemDrawer{``0},System.Single)">
      <summary>
            Draw list field control with absolute positioning.
            </summary>
      <param name="position">Position of control.</param>
      <param name="list">The list which can be reordered.</param>
      <param name="drawItem">Callback to draw list item.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="itemHeight">Height of a single list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <typeparam name="T">Type of list item.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute``1(UnityEngine.Rect,System.Collections.Generic.IList{``0},Rotorz.ReorderableList.ReorderableListControl.ItemDrawer{``0},System.Single,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control with absolute positioning.
            </summary>
      <param name="position">Position of control.</param>
      <param name="list">The list which can be reordered.</param>
      <param name="drawItem">Callback to draw list item.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="itemHeight">Height of a single list item.</param>
      <param name="flags">Optional flags to pass into list field.</param>
      <typeparam name="T">Type of list item.</typeparam>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute(UnityEngine.Rect,UnityEditor.SerializedProperty)">
      <summary>
            Draw list field control for serializable property array.
            </summary>
      <param name="position">Position of control.</param>
      <param name="arrayProperty">Serializable property.</param>
      <param name="fixedItemHeight">Use fixed height for items rather than <see cref="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)" />.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute(UnityEngine.Rect,UnityEditor.SerializedProperty,Rotorz.ReorderableList.ReorderableListControl.DrawEmptyAbsolute)">
      <summary>
            Draw list field control for serializable property array.
            </summary>
      <param name="position">Position of control.</param>
      <param name="arrayProperty">Serializable property.</param>
      <param name="fixedItemHeight">Use fixed height for items rather than <see cref="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)" />.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute(UnityEngine.Rect,UnityEditor.SerializedProperty,Rotorz.ReorderableList.ReorderableListControl.DrawEmptyAbsolute,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control for serializable property array.
            </summary>
      <param name="position">Position of control.</param>
      <param name="arrayProperty">Serializable property.</param>
      <param name="fixedItemHeight">Use fixed height for items rather than <see cref="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)" />.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute(UnityEngine.Rect,UnityEditor.SerializedProperty,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control for serializable property array.
            </summary>
      <param name="position">Position of control.</param>
      <param name="arrayProperty">Serializable property.</param>
      <param name="fixedItemHeight">Use fixed height for items rather than <see cref="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)" />.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single)">
      <summary>
            Draw list field control for serializable property array.
            </summary>
      <param name="position">Position of control.</param>
      <param name="arrayProperty">Serializable property.</param>
      <param name="fixedItemHeight">Use fixed height for items rather than <see cref="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)" />.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,Rotorz.ReorderableList.ReorderableListControl.DrawEmptyAbsolute)">
      <summary>
            Draw list field control for serializable property array.
            </summary>
      <param name="position">Position of control.</param>
      <param name="arrayProperty">Serializable property.</param>
      <param name="fixedItemHeight">Use fixed height for items rather than <see cref="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)" />.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,Rotorz.ReorderableList.ReorderableListControl.DrawEmptyAbsolute,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control for serializable property array.
            </summary>
      <param name="position">Position of control.</param>
      <param name="arrayProperty">Serializable property.</param>
      <param name="fixedItemHeight">Use fixed height for items rather than <see cref="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)" />.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.ListFieldAbsolute(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,Rotorz.ReorderableList.ReorderableListFlags)">
      <summary>
            Draw list field control for serializable property array.
            </summary>
      <param name="position">Position of control.</param>
      <param name="arrayProperty">Serializable property.</param>
      <param name="fixedItemHeight">Use fixed height for items rather than <see cref="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)" />.</param>
      <param name="drawEmpty">Callback to draw custom content for empty list (optional).</param>
      <param name="flags">Optional flags to pass into list field.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.TextFieldItemDrawer(UnityEngine.Rect,System.String)">
      <summary>
            Draws text field allowing list items to be edited.
            </summary>
      <param name="position">Position to draw list item control(s).</param>
      <param name="item">Value of list item.</param>
      <returns>
            Modified value of list item.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.Title(System.String)">
      <summary>
            Draw title control for list field.
            </summary>
      <param name="title">Text for title control.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.Title(UnityEngine.GUIContent)">
      <summary>
            Draw title control for list field.
            </summary>
      <param name="title">Content for title control.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.Title(UnityEngine.Rect,System.String)">
      <summary>
            Draw title control for list field with absolute positioning.
            </summary>
      <param name="position">Position of control.</param>
      <param name="text">Text for title control.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.ReorderableListGUI.Title(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
            Draw title control for list field with absolute positioning.
            </summary>
      <param name="position">Position of control.</param>
      <param name="title">Content for title control.</param>
    </member>
    <member name="T:Rotorz.ReorderableList.ReorderableListStyles">
      <summary>
            Styles for the <see cref="T:Rotorz.ReorderableList.ReorderableListControl" />.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListStyles.Container">
      <summary>
            Gets style for the background of list control.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListStyles.Container2">
      <summary>
            Gets an alternative style for the background of list control.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListStyles.FooterButton">
      <summary>
            Gets style for footer button.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListStyles.FooterButton2">
      <summary>
            Gets an alternative style for footer button.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListStyles.HorizontalLineColor">
      <summary>
            Gets color for the horizontal lines that appear between list items.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListStyles.ItemButton">
      <summary>
            Gets style for remove item button.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListStyles.SelectedItem">
      <summary>
            Gets style for the background of a selected item.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListStyles.SelectionBackgroundColor">
      <summary>
            Gets color of background for a selected list item.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.ReorderableListStyles.Title">
      <summary>
            Gets style for title header.
            </summary>
    </member>
    <member name="T:Rotorz.ReorderableList.SerializedPropertyAdaptor">
      <summary>
            Reorderable list adaptor for serialized array property.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.SerializedPropertyAdaptor.#ctor(UnityEditor.SerializedProperty)">
      <summary>
            Initializes a new instance of <see cref="T:Rotorz.ReorderableList.SerializedPropertyAdaptor" />.
            </summary>
      <param name="arrayProperty">Serialized property for entire array.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.SerializedPropertyAdaptor.#ctor(UnityEditor.SerializedProperty,System.Single)">
      <summary>
            Initializes a new instance of <see cref="T:Rotorz.ReorderableList.SerializedPropertyAdaptor" />.
            </summary>
      <param name="arrayProperty">Serialized property for entire array.</param>
      <param name="fixedItemHeight">Non-zero height overrides property drawer height calculation.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.SerializedPropertyAdaptor.Add">
      <summary>
            Add new element at end of list.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.SerializedPropertyAdaptor.arrayProperty">
      <summary>
            Gets the underlying serialized array property.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.SerializedPropertyAdaptor.BeginGUI">
      <summary>
            Occurs before any list items are drawn.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.SerializedPropertyAdaptor.CanDrag(System.Int32)">
      <summary>
            Determines whether an item can be reordered by dragging mouse.
            </summary>
      <param name="index">Zero-based index for list element.</param>
      <returns>
            A value of <c>true</c> if item can be dragged; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.SerializedPropertyAdaptor.CanRemove(System.Int32)">
      <summary>
            Determines whether an item can be removed from list.
            </summary>
      <param name="index">Zero-based index for list element.</param>
      <returns>
            A value of <c>true</c> if item can be removed; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.SerializedPropertyAdaptor.Clear">
      <summary>
            Clear all elements from list.
            </summary>
    </member>
    <member name="P:Rotorz.ReorderableList.SerializedPropertyAdaptor.Count">
      <summary>
            Gets count of elements in list.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.SerializedPropertyAdaptor.DrawItem(UnityEngine.Rect,System.Int32)">
      <summary>
            Draws main interface for a list item.
            </summary>
      <param name="position">Position in GUI.</param>
      <param name="index">Zero-based index of array element.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.SerializedPropertyAdaptor.DrawItemBackground(UnityEngine.Rect,System.Int32)">
      <summary>
            Draws background of a list item.
            </summary>
      <param name="position">Total position of list element in GUI.</param>
      <param name="index">Zero-based index of array element.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.SerializedPropertyAdaptor.Duplicate(System.Int32)">
      <summary>
            Duplicate existing element.
            </summary>
      <param name="index">Zero-based index of list element.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.SerializedPropertyAdaptor.EndGUI">
      <summary>
            Occurs after all list items have been drawn.
            </summary>
    </member>
    <member name="F:Rotorz.ReorderableList.SerializedPropertyAdaptor.FixedItemHeight">
      <summary>
            Fixed height of each list item.
            </summary>
    </member>
    <member name="M:Rotorz.ReorderableList.SerializedPropertyAdaptor.GetItemHeight(System.Int32)">
      <summary>
            Gets height of list item in pixels.
            </summary>
      <param name="index">Zero-based index of array element.</param>
      <returns>
            Measurement in pixels.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.SerializedPropertyAdaptor.Insert(System.Int32)">
      <summary>
            Insert new element at specified index.
            </summary>
      <param name="index">Zero-based index for list element.</param>
    </member>
    <member name="P:Rotorz.ReorderableList.SerializedPropertyAdaptor.Item(System.Int32)">
      <summary>
            Gets element from list.
            </summary>
      <param name="index">Zero-based index of element.</param>
      <returns>
            Serialized property wrapper for array element.
            </returns>
    </member>
    <member name="M:Rotorz.ReorderableList.SerializedPropertyAdaptor.Move(System.Int32,System.Int32)">
      <summary>
            Move element from source index to destination index.
            </summary>
      <param name="sourceIndex">Zero-based index of source element.</param>
      <param name="destIndex">Zero-based index of destination element.</param>
    </member>
    <member name="M:Rotorz.ReorderableList.SerializedPropertyAdaptor.Remove(System.Int32)">
      <summary>
            Remove element at specified index.
            </summary>
      <param name="index">Zero-based index of list element.</param>
    </member>
  </members>
</doc>